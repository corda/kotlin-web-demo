

/*
 * Copyright 2000-2016 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


buildscript {

    ext.corda_release_version = '1.0.0'
    ext.corda_gradle_plugins_version = '1.0.0'
    ext.quasar_version = '0.7.6'

 //   ext.jackson_version_kwd = '2.7.4'
    ext.jackson_version_kwd = '2.8.5'
    ext.jackson_version_corda = '2.8.5'

    apply from: 'versions.gradle'
    repositories {
        mavenCentral()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        jcenter()
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.moowork.gradle:gradle-node-plugin:0.11"
        classpath "gradle.plugin.com.github.jk1:tcdeps:0.9.1"

        classpath "net.corda.plugins:publish-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
    }
}


ext.kotlinConfigs = gradle.ext.kotlinConfigs
ext.kotlinVersions = kotlinConfigs.collect { it.version }

allprojects {
    repositories {
        jcenter()
        maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
        kotlinOptions {
      //      jvmTarget = "1.8"
        }
    }
}

apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'net.corda.plugins.publish-utils'
apply plugin: 'net.corda.plugins.cordformation'
apply plugin: 'net.corda.plugins.quasar-utils'

configure(allprojects.findAll({
    it.name != 'kotlin.web.demo.frontend'
})) {
    apply plugin: 'java'
//    sourceCompatibility = 1.7
//    targetCompatibility = 1.7

    // RG Amended above.

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
    }

    sourceSets {
        test {
            java {
                srcDir 'test'
            }
        }
    }

    dependencies {
        compile "com.fasterxml.jackson.core:jackson-core:$jackson_version_kwd"
        compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version_kwd"
        compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version_kwd"

//        compile "com.fasterxml.jackson.core:jackson-core:$jackson_version_kwd:transitive:true"
//        compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version_kwd:transitive:true"
//        compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version_kwd:transitive:true"


        compile 'commons-logging:commons-logging:1.2'
    }
}

configure([
        project(':kotlin.web.demo.server'),
        project(':kotlin.web.demo.backend'),
        project(':kotlin.web.demo.common'),
        project(':kotlin.web.demo.executors'),
        project(':kotlin.web.demo.backend:compilers'),
        project(':kotlin.web.demo.test')
]) {
    apply plugin: 'kotlin'
    dependencies {
        //compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlinVersion"
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
        compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version_kwd"
    }
}

configure([
        project(':kotlin.web.demo.server'),
        project(':kotlin.web.demo.backend'),
        project(':kotlin.web.demo.backend:compilers'),
        project(':kotlin.web.demo.test')
]) {
    dependencies {
        compile project(':kotlin.web.demo.common')
    }
}

for (config in kotlinConfigs) {
    def build = config.build
    def version = config.version
    def buildType = config.buildType ?: "bt345"
    def pluginBuild = config.pluginBuild ?: config.build
    def projectsName = ":kotlin.web.demo.backend:compilers:versions:$version"
    project(projectsName) {
        apply plugin: 'com.github.jk1.tcdeps'

        repositories {
            teamcityServer {
                url = 'http://teamcity.jetbrains.com'
            }
        }
        configurations {
            kotlin
            kotlinJS
        }

        dependencies {
            compile project(":kotlin.web.demo.backend:compilers")

            def root = config.useOriginalVersion ?
                    "$buildType:$build:kotlin-plugin-${pluginBuild}.zip!/Kotlin/kotlinc/lib" :
                    "$buildType:$build:kotlin-compiler-${build}.zip!/kotlinc/lib"

            if (config.useOriginalVersion) {
                kotlin tc("$buildType:$build:internal/kotlin-compiler-before-shrink.jar")
                kotlin tc("$buildType:$build:kotlin-plugin-${pluginBuild}.zip!/Kotlin/lib/kotlin-plugin.jar")
            } else {
                kotlin tc("$root/kotlin-compiler.jar")
                kotlin tc("${config.pluginBuildType}:${config.kotlinPluginBuild}:kotlin-plugin-${pluginBuild}.zip!/Kotlin/lib/kotlin-plugin.jar")
            }

            kotlin tc("$root/kotlin-runtime.jar")
            kotlin tc("$root/kotlin-reflect.jar")
            kotlin tc("$root/kotlin-test.jar")
            kotlin tc("$root/kotlin-jslib.jar")

            if (config.hasScriptJar) {
                kotlin tc("$root/kotlin-script-runtime.jar")
            }

            kotlinJS tc("$root/kotlin-jslib.jar")

            if(!version.startsWith("1.0")) {
                kotlin "org.jetbrains.kotlinx:kotlinx-coroutines-core:0.17"
            }
            if(config.stdlibVersion) {
                kotlin group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib-jre8', version: config.stdlibVersion
            }

            compile fileTree(dir: projectDir.toString() + File.separator + "kotlin", include: '*.jar')
        }
    }
}

// Idea can't resolve tc dependencies, so we have to download them
// into folder and add all jars from this folder as dependencies.
task copyKotlinLibs() {
    for (kotlinVersion in kotlinVersions) {
        def wrapperProject = project(":kotlin.web.demo.backend:compilers:versions:$kotlinVersion")
        copy {
            from wrapperProject.configurations.kotlin
            into wrapperProject.projectDir.toString() + File.separator + "kotlin"
        }
        copy {
            from(wrapperProject.configurations['kotlinJS'].collect { zipTree(it) })
            into wrapperProject.projectDir.toString() + File.separator + "js"
        }
    }
}

project("kotlin.web.demo.backend") {
    apply plugin: 'war'

    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
    }

    dependencies {

        compile "net.corda:corda-core:$corda_release_version"

        compile "net.corda:corda-finance:$corda_release_version"
        compile "net.corda:corda-jackson:$corda_release_version"
        compile "net.corda:corda-rpc:$corda_release_version"
        compile "net.corda:corda-node-api:$corda_release_version"
        compile "net.corda:corda-webserver-impl:$corda_release_version"
        compile "net.corda:corda:$corda_release_version"
        compile "net.corda:corda-webserver:$corda_release_version"

        // RAG Note:
        // Uncommenting below gives the crashell error
        // compile "net.corda:corda-test-utils:$corda_release_version" // -> gives crash error
        compile "net.corda:corda-node-driver:$corda_release_version"

        compile "org.apache.activemq:artemis-core-client:2.1.0"
        compile "org.apache.activemq:artemis-amqp-protocol:2.1.0"
        compile "org.apache.activemq:artemis-commons:2.1.0"
        compile "org.apache.activemq:artemis-core-client:2.1.0"
        compile "org.apache.activemq:artemis-jdbc-store:2.1.0"
        compile "org.apache.activemq:artemis-jms-client:2.1.0"
        compile "org.apache.activemq:artemis-journal:2.1.0"
        compile "org.apache.activemq:artemis-native:2.1.0"
        compile "org.apache.activemq:artemis-selector:2.1.0"
        compile "org.apache.activemq:artemis-server:2.1.0"


        compile project(":kotlin.web.demo.backend:compilers")
        compile project(":kotlin.web.demo.executors")
        providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    }

    war {
        archiveName "WebDemoBackend.war"

        from(project(':kotlin.web.demo.executors').projectDir) {
            include 'executors.policy.template'
        }

        for (kotlinVersion in kotlinVersions) {
            def wrapperProject = project(":kotlin.web.demo.backend:compilers:versions:$kotlinVersion")
            from(wrapperProject.sourceSets.main.output) {
                into("WEB-INF/kotlin-wrappers/$kotlinVersion/classes")
            }
            from(wrapperProject.configurations['kotlinJS'].collect { zipTree(it) }) {
                into "WEB-INF/kotlin-wrappers/$kotlinVersion/js"
            }
            from(wrapperProject.configurations['kotlin']) {
                into "WEB-INF/kotlin-wrappers/$kotlinVersion/kotlin"
            }
        }
    }
}

project("kotlin.web.demo.executors") {
    dependencies {
        compile group: 'junit', 'name': 'junit', 'version': '4.12'
        compile "net.corda:corda-core:$corda_release_version"
    }

    task copyToLib(type: Copy) {
        into "$buildDir/libs"
        from configurations.compile
    }
    jar.dependsOn(copyToLib)
}

project(':kotlin.web.demo.frontend') {
    apply plugin: 'kotlin2js'
    apply plugin: 'com.moowork.node'

    repositories {
        mavenCentral()
        maven {
            url "http://dl.bintray.com/kotlinx/kotlinx"
        }
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-js-library:$kotlinVersion"
        //compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlinVersion"
        compile "org.jetbrains.kotlinx:kotlinx.html.js:0.5.12"
    }

    sourceSets {
        main {
            kotlin {
                srcDir 'src'
            }
        }
    }

    compileKotlin2Js{
        kotlinOptions.outputFile = "${buildDir}/kotlin.web.demo.frontend.js"
        kotlinOptions.moduleKind='commonjs'
    }

    task bowerInstall(type: NodeTask, dependsOn: npmInstall) {
        script = file('node_modules/bower/bin/bower')
        args = ['install']
    }
    build.dependsOn('bowerInstall')

    node {
        version = '4.0.0'
        download = true
    }

    task copyJsFilesFromDependencies(dependsOn: 'compileKotlin2Js') {
        configurations.compile.each { File file ->
            copy {
                includeEmptyDirs = false

                from zipTree(file.absolutePath)
                into "${buildDir}/libs"
                include { fileTreeElement ->
                    def path = fileTreeElement.path
                    path.endsWith(".js") && !path.endsWith(".meta.js") &&
                            (path.startsWith("META-INF/resources/") || !path.startsWith("META-INF/"))
                }
            }
        }
    }

    task buildAssets(type: NpmTask, dependsOn: 'copyJsFilesFromDependencies') {
        args=['run', 'build']
    }

    build.dependsOn 'buildAssets'
}

project("kotlin.web.demo.server") {
    apply plugin: 'war'

    dependencies {
        compile group: 'org.scribe', name: 'scribe', version: '1.3.7'
        compile group: 'org.jetbrains', name: 'annotations', version: '13.0'
        compile 'org.twitter4j:twitter4j-core:4.0.4'
        compile 'com.nimbusds:nimbus-jose-jwt:3.9'
        compile 'org.pegdown:pegdown:1.5.0'
        runtime 'org.tuckey:urlrewritefilter:4.0.4'
        providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    }

    war {
        dependsOn ':kotlin.web.demo.frontend:build'
        archiveName "WebDemoWar.war"

        from('examples') {
            into 'examples'
        }
        from('help')
        from("${project(':kotlin.web.demo.frontend').projectDir}/static") {
            into 'static'
        }
        from("${project(':kotlin.web.demo.frontend').buildDir}") {
            into 'static'
            include 'kotlin.web.demo.frontend.js'
        }
        from("${project(':kotlin.web.demo.frontend').projectDir}/index.html")
        from("${rootProject.projectDir}/build.txt")
        for (kotlinVersion in kotlinVersions) {
            def wrapperProject = project(":kotlin.web.demo.backend:compilers:versions:$kotlinVersion")
            from(wrapperProject.configurations['kotlinJS'].collect { zipTree(it) }) {
                include "kotlin.js"
                into "static/kotlin/${kotlinVersion}"
            }
            from(project(":kotlin.web.demo.frontend").projectDir.absolutePath + File.separator + "static") {
                include "iframe.html"
                into "static/kotlin/${kotlinVersion}"
            }
        }
    }
}


project('kotlin.web.demo.test') {
    dependencies {
        testCompile project(':kotlin.web.demo.backend:compilers')
        testCompile project(':kotlin.web.demo.backend')
        testCompile project(':kotlin.web.demo.server')
        testCompile group: 'org.jetbrains.kotlin', 'name': 'kotlin-test', 'version': '1.0.1-2'
        testCompile group: 'junit', 'name': 'junit', 'version': '4.12'
       // testCompile "net.corda:corda-core:$corda_release_version"

    }
    for (kotlinVersion in kotlinVersions) {
        test.dependsOn(":kotlin.web.demo.backend:compilers:versions:$kotlinVersion:classes")
    }
    test.dependsOn(":kotlin.web.demo.executors:jar")
//    test.dependsOn(":copyKotlinLibs")
}

project(':kotlin.web.demo.backend:compilers:versions').jar { onlyIf { false } }

